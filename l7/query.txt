1.
models.DomainNameServer.objects.filter(address='dns.server.1')
Out[7]: <QuerySet [<DomainNameServer: DomainNameServer object (dns.server.1)>]>

2.
In [3]: models.Website.objects.filter(expires__gt='2023-05-09')
Out[3]: <QuerySet [<Website: Website object (hills.com)>, <Website: Website object (bills.com)>, <Website: Website object (amogus.sus)>]>

3.
In [4]: models.Website.objects.filter(expires__gt='2023-05-12')
Out[4]: <QuerySet [<Website: Website object (hills.com)>, <Website: Website object (bills.com)>]>

4.
In [5]: models.Website.objects.filter(name__endswith='.com')
Out[5]: <QuerySet [<Website: Website object (hills.com)>, <Website: Website object (bills.com)>]>

5.
In [7]: models.DomainNameServer.objects.filter(address__contains='dns')
Out[7]: <QuerySet [<DomainNameServer: DomainNameServer object (dns.server.1)>, <DomainNameServer: DomainNameServer object (dns.server.2)>]>

6.
In [10]: models.Client.objects.filter(login__exact='shrek')
Out[10]: <QuerySet [<Client: Client object (shrek)>]>

7.
In [11]: models.Client.objects.filter(login__iexact='shrek')
Out[11]: <QuerySet [<Client: Client object (shrek)>, <Client: Client object (SHrek)>]>

8.
In [12]: models.Website.objects.filter(expires__range=['2023-06-01','2023-06-30'])
Out[12]: <QuerySet [<Website: Website object (hills.com)>]>

9.
In [18]: usr = models.Client.objects.first()
In [19]: usr.dns_server
Out[19]: <django.db.models.fields.related_descriptors.create_forward_many_to_many_manager.<locals>.ManyRelatedManager at 0x1e70cc6af90>
In [20]: usr.dns_server.all()
Out[20]: <QuerySet [<DomainNameServer: DomainNameServer object (dns.server.1)>, <DomainNameServer: DomainNameServer object (dns.server.2)>]>

10.
In [22]: models.Website.objects.filter(name__contains='sus').exists()
Out[22]: True
